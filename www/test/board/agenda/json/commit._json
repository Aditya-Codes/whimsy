require 'yaml'

# reflow string support
class String
  def word_wrap(text, line_width=80)
    text.split("\n").collect do |line|
      line.length > line_width ? 
        line.gsub(/(.{1,#{line_width}})(\s+|$)/, "\\1\n").strip : line
    end * "\n"
  end

  def reflow(indent, len)
    strip.split(/\n\s*\n/).map {|line|
      line.gsub!(/\s+/, ' ')
      line.strip!
      word_wrap(line, len).gsub(/^/, ' '*indent)
    }.join("\n\n")
  end
end

# apply comments to an agenda file
def apply_comments(agenda_file, updates)
  agenda = File.read(agenda_file)
  approved = updates['approved']
  comments = updates['comments']
  initials = updates['initials']

  patterns = {
   '' => /
     ^\s{7}See\sAttachment\s\s?(\w+)[^\n]*?\s+
     \[\s[^\n]*\s*approved:\s*?(.*?)
     \s*comments:(.*?)\n\s{9}\]
     /mx,

   '3' => /
     ^\s{4}(\w)\.\sThe\smeeting\sof.*?
     \[\s[^\n]*\s*approved:\s*?(.*?)
     \s*comments:(.*?)\n\s{9}\]
     /mx,

   '4' => /
     ^\s{4}(\w)\.\sPresident\s\[.*?
     \[\s*comments:()(.*?)\n\s{9}\]
     /mx,
  }

  patterns.each do |prefix, pattern|
    agenda.gsub!(pattern) do |match|
      attachment, approvals = prefix + $1, $2

      if approved.include? attachment
        approvals = approvals.strip.split(/(?:,\s*|\s+)/)
        if approvals.include? initials
          # do nothing
        elsif approvals.empty?
          match[/approved:(\s*)\n/, 1] = " #{initials}"
        else
          match[/approved:.*?()\n/, 1] = ", #{initials}"
        end
      end

      if comments.include? attachment
        width = 79-13-initials.length
        text = comments[attachment].reflow(13+initials.length, width)
        text[/ *(#{' '*(initials.length+2)})/,1] = "#{initials}: "
        match[/\n()\s{9}\]/,1] = "#{text}\n"
      end

      match
    end
  end

  File.open(agenda_file, 'w') {|file| file.write(agenda)}
end

user = ENV['REMOTE_USER']
user = user.dup.untaint if user =~ /\A\w+\Z/
updates = YAML.load_file("#{MINUTES_WORK}/#{user}.yml")

agenda = updates['agenda']
agenda = agenda.dup.untaint if agenda =~ /\Aboard_agenda_[\d_]+\.txt\Z/
agenda_file = "#{ASF::SVN['private/foundation/board']}/#{agenda}"

if __FILE__ == $0
  # for testing purposes
  require '/var/tools/asf'
  MINUTES_WORK = '/var/tools/data'
  apply_comments(agenda_file, updates)
  `svn diff #{agenda_file}`
else
  File.open(agenda_file, 'r') do |file|
    file.flock(File::LOCK_EX)
    `svn up #{agenda_file}`
    `svn revert #{agenda_file}`

    apply_comments(agenda_file, updates)

    commit = ['svn', 'commit', '-m', @message, agenda_file,
      '--no-auth-cache', '--non-interactive']

    if defined? env.password
      commit += ['--username', env.user, '--password', env.password]
    end

    require 'shellwords'
    output = `#{Shellwords.join(commit).untaint} 2>&1`
    if $?.exitstatus != 0
      _.error (output.empty? ? 'svn commit failed' : output)
      raise Exception.new('svn commit failed')
    end

    File.rename "#{MINUTES_WORK}/#{user}.yml", "#{MINUTES_WORK}/#{user}.bak"

    _pending Pending.get
    _agenda ASF::Board::Agenda.parse(File.read(agenda_file))
  end
end

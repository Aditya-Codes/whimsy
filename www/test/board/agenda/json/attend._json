unless @name
  @name = ASF::Person.find(@userid).public_name
end

agenda_file = "#{FOUNDATION_BOARD}/#{@agenda}"

File.open(agenda_file, 'r') do |file|
  file.flock(File::LOCK_EX)
  `svn cleanup #{File.dirname(agenda_file)}`
  `svn up #{agenda_file}`
  `svn revert #{agenda_file}`

  agenda = File.read(agenda_file)

  directors = agenda[/^ +Directors.*?:\n\n.*?\n\n +Directors.*?:\n\n.*?\n\n/m]
  officers = agenda[/^ +Executive.*?:\n\n.*?\n\n +Executive.*?:\n\n.*?\n\n/m]
  guests = agenda[/^ +Guests.*?:\n\n.*?\n\n/m]

  if directors.include? @name

    updated = directors.sub /^ .*#{@name}.*?\n/, ''

    if @action == 'regrets'
      updated[/Absent:\n\n.*?\n()\n/m, 1] = "        #{@name}\n"
      updated.sub! /:\n\n +none\n/, ":\n\n"
      updated.sub! /Present:\n\n\n/, "Present:\n\n        none\n\n"
    else
      updated[/Present:\n\n.*?\n()\n/m, 1] = "        #{@name}\n"
      updated.sub! /Absent:\n\n\n/, "Absent:\n\n        none\n\n"

      # sort Directors
      updated.sub!(/Present:\n\n(.*?)\n\n/m) do |match|
        before=$1
        after=before.split("\n").sort_by {|name| name.split.rotate(-1)}
        match.sub(before, after.join("\n"))
      end
    end

    agenda.sub! directors, updated

  elsif officers.include? @name

    updated = officers.sub /^ .*#{@name}.*?\n/, ''

    if @action == 'regrets'
      updated[/Absent:\n\n.*?\n()\n/m, 1] = "        #{@name}\n"
      updated.sub! /:\n\n +none\n/, ":\n\n"
      updated.sub! /Present:\n\n\n/, "Present:\n\n        none\n\n"
    else
      updated[/Present:\n\n.*?\n()\n/m, 1] = "        #{@name}\n"
      updated.sub! /Absent:\n\n\n/, "Absent:\n\n        none\n\n"
    end

    agenda.sub! officers, updated

  elsif @action == 'regrets'

    updated = guests.sub /^ .*#{@name}.*?\n/, ''
    updated.sub! /:\n\n\n/, ":\n\n        none\n"

    agenda.sub! guests, updated

  elsif not guests.include? @name

    updated = guests.sub /\n\Z/, "\n        #{@name}\n"
    updated.sub! /:\n\n +none\n/, ":\n\n"

    agenda.sub! guests, updated

  end

  File.open(agenda_file, 'w') {|file| file.write(agenda)}

  if @action == 'regrets'
    message = "Regrets for the meeting."
  else
    message = "I plan to attend the meeting."
  end

  commit = ['svn', 'commit', '-m', message, agenda_file,
    '--no-auth-cache', '--non-interactive']

  if env.password
    commit += ['--username', env.user, '--password', env.password]
  end

  require 'shellwords'
  output = `#{Shellwords.join(commit).untaint} 2>&1`
  if $?.exitstatus != 0
    _.error (output.empty? ? 'svn commit failed' : output)
    raise Exception.new('svn commit failed')
  end

  _! ASF::Board::Agenda.parse(File.read(agenda_file))
end

# apply comments to an agenda file

user = env.user

agenda_file = "#{FOUNDATION_BOARD}/#{@agenda}"

File.open(agenda_file, 'r') do |file|
  file.flock(File::LOCK_EX)
  `svn cleanup #{File.dirname(agenda_file)}`
  `svn up #{agenda_file}`
  `svn revert #{agenda_file}`

  agenda = File.read(agenda_file)

  if @attach == '7?'
    # new special order

    # adjust indentation
    indent = @report.scan(/^ +/).min
    @report.gsub!(/^#{indent}/, '') if indent
    @report.gsub!(/^(\S)/, '       \1')

    # add order letter to title
    order = 'A'
    ASF::Board::Agenda.parse(agenda).map {|section| section[:attach]}.
      select {|attach| attach =~ /^7\w/}.length.times {order.succ!}
    title = "    #{order}. #{@title}\n\n"

    # insert into agenda
    agenda[/\n() 8\. Discussion Items/, 1] = "#{title}#{@report.chomp}\n\n"

    @message = "Post Special Order 7#{order}: #{@title}"
  else
    item = ASF::Board::Agenda.parse(agenda).find {|item| item[:attach]==@attach}

    if not item
      raise Exception.new("Attachment #{@attach.inspect} not found")
    elsif @digest != item['digest']
      raise Exception.new("Merge conflict")
    end

    if @attach =~ /^4\w/
      pattern = /(\n\n    #{@attach[-1]}\..*?\[.*?\])\n.*?(\s*\n-{40})/m
    elsif @attach =~ /^7\w/
      pattern = /(^\s+#{@attach[-1]}\.\s+#{@fulltitle})\n.*?(\n {1,6}\w\.)/m
      @report.gsub! /^(.)/, '       \1'
    else
      pattern = /(---\nAttachment #{@attach}:.*?\[.*?\])\n.*?(\s*\n-{40})/m
    end

    if not agenda.sub!(pattern) { "#{$1}\n\n#{@report}\n#{$2}" }
      raise Exception.new('report merge failed')
    end
  end

  File.open(agenda_file, 'w') {|file| file.write(agenda)}

  commit = ['svn', 'commit', '-m', @message, agenda_file,
    '--no-auth-cache', '--non-interactive']

  if env.password
    commit += ['--username', env.user, '--password', env.password]
  end

  require 'shellwords'
  output = `#{Shellwords.join(commit).untaint} 2>&1`
  if $?.exitstatus != 0
    _.error (output.empty? ? 'svn commit failed' : output)
    raise Exception.new('svn commit failed')
  end

  _! ASF::Board::Agenda.parse(File.read(agenda_file))
end
